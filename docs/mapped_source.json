{
  "String": [
    {
      "description": "Convert an array to a string and combine on the delimiter passed.",
      "args": [
        {
          "description": "array to convert to string",
          "param": "array",
          "type": "Array",
          "optional": false
        },
        {
          "description": "characater to use in  combining to string",
          "param": "delimiter",
          "type": "String",
          "optional": false
        }
      ],
      "module": "String",
      "method": "arrayToString",
      "returns": {
        "desc": "Returns a string from the array.",
        "type": "String"
      },
      "example": "arrayToString(['The', 'quick', 'brown'], '-');\n// => 'The-brown-fox'",
      "utilArgs": "arrayToString(array, delimiter)"
    },
    {
      "description": "Converts a string to Sentence case.",
      "args": [
        {
          "description": "string to convert to Sentence case",
          "param": "string",
          "type": "String",
          "optional": false
        }
      ],
      "module": "String",
      "method": "toSentenceCase",
      "returns": {
        "desc": "Returns a Sentence case string.",
        "type": "String"
      },
      "example": "toSentenceCase('THE QUICK BROWN FOX');\n// => 'The quick brown fox'",
      "utilArgs": "toSentenceCase(string)"
    },
    {
      "description": "Converts a string to a Title Case.",
      "args": [
        {
          "description": "string to convert to Title Case",
          "param": "string",
          "type": "String",
          "optional": false
        }
      ],
      "module": "String",
      "method": "toTitleCase",
      "returns": {
        "desc": "Returns a Tile Case string.",
        "type": "String"
      },
      "example": "toTitleCase('the quick brown fox');\n// => 'The Quick Brown Fox'",
      "utilArgs": "toTitleCase(string)"
    }
  ],
  "Browser": [
    {
      "description": "Detects browser being used.",
      "args": [],
      "module": "Browser",
      "method": "browserDetect",
      "returns": {
        "desc": "Returns browser name",
        "type": "String"
      },
      "example": "browserDetect();\n// => 'Chrome",
      "utilArgs": "browserDetect()"
    }
  ],
  "Color": [
    {
      "description": "Brightens or darkens a HEX color based on the amount specified. Behaves like the SASS lighen and darken.\nWill always return with # symbol.",
      "args": [
        {
          "description": "HEX color to change brightness",
          "param": "hex",
          "type": "String",
          "optional": false
        },
        {
          "description": "positive or negative percentage",
          "param": "amount",
          "type": "Number",
          "optional": false
        }
      ],
      "module": "Color",
      "method": "colorBrightness",
      "returns": {
        "desc": "Returns a manipulated HEX color",
        "type": "String"
      },
      "example": "colorBrightness('#3CB878', 50);\n// => '#6EEAAA'\n\ncolorBrightness('#3CB878', -50);\n// => '#A8646'",
      "utilArgs": "colorBrightness(hex, amount)"
    },
    {
      "description": "Inverts a HEX color.",
      "args": [
        {
          "description": "hex color to convert",
          "param": "hex",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Color",
      "method": "invertColor",
      "returns": {
        "desc": "Returns a HEX color string.",
        "type": "String"
      },
      "example": "invertColor('#E3CCA8');\n// => '#1C3357'\n\ninvertColor('ccc');\n// => '#333333'",
      "utilArgs": "invertColor(hex)"
    },
    {
      "description": "Get a random pastel color.",
      "args": [],
      "module": "Color",
      "method": "randomPastelColor",
      "returns": {
        "desc": "Returns an HSL color.",
        "type": "String"
      },
      "example": "randomPastelColor();\n// => 'hsl(85.78009756824814,31.861668997564585%,90.94781190317771%)'",
      "utilArgs": "randomPastelColor()"
    }
  ],
  "Core": [
    {
      "description": "Checks if the type of the value is the expected type.",
      "args": [
        {
          "description": "any value to check",
          "param": "arg",
          "type": "*",
          "optional": false
        },
        {
          "description": "the type to check the value against",
          "param": "expectedType",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Core",
      "method": "doTypesMatch",
      "returns": {
        "desc": "Returns a boolean if the type of the value matches to expectedType.",
        "type": "Boolean"
      },
      "example": "doTypesMatch(1, 'number');\n// => true\n\ndoTypesMatch('abc', 'number');\n// => false",
      "utilArgs": "doTypesMatch(arg, expectedType)"
    }
  ],
  "Key": [
    {
      "description": "Generates a GUID.",
      "args": [],
      "module": "Key",
      "method": "guid",
      "returns": {
        "desc": "guid string",
        "type": "String"
      },
      "example": "guid();\n// => \"0153a717-3ba2-b1ac-67f1-49db6551a28d\"",
      "utilArgs": "guid()"
    }
  ],
  "File": [
    {
      "description": "Converts a number of bytes to a human readable file size.",
      "args": [
        {
          "description": "number of bytes to show",
          "param": "bytes",
          "type": "Number",
          "optional": false
        },
        {
          "description": "optional number of decimals to show",
          "param": "decimals",
          "type": "Number",
          "optional": true
        }
      ],
      "module": "File",
      "method": "readableBytes",
      "returns": {
        "desc": "Returns a human readable file size.",
        "type": "String"
      },
      "example": "readableBytes(1234);\n// => 1.205078125 kB\n\nreadableBytes(1234, 2);\n// => 1.21 kB",
      "utilArgs": "readableBytes(bytes, [decimals])"
    }
  ],
  "Slug": [
    {
      "description": "Converts a string into a slug for URL usage.",
      "args": [
        {
          "description": "string to convert to slug",
          "param": "string",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Slug",
      "method": "slugify",
      "returns": {
        "desc": "Returns slug version of the string.",
        "type": "String"
      },
      "example": "slugify('The quick brown fox');\n// => 'the-quick-brown-fox'\n\nslugify('A. more-Complicated string!..');\n// => 'a-more-complicated-string'\n\nslugify('wïth speciäl chærs');\n// => 'with-special-chars'",
      "utilArgs": "slugify(string)"
    }
  ],
  "Storage": [
    {
      "description": "Removes all data stored in the local storage.",
      "args": [],
      "module": "Storage",
      "method": "storageClear",
      "example": "storageClear();",
      "utilArgs": "storageClear()"
    },
    {
      "description": "Retrieves data from the local storage.",
      "args": [
        {
          "description": "key to retrieve",
          "param": "key",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Storage",
      "method": "storageGet",
      "returns": {
        "desc": "Returns data from the local storage. Returns '' if key is not found",
        "type": "Any"
      },
      "example": "storageGet('key');",
      "utilArgs": "storageGet(key)"
    },
    {
      "description": "Removes an entry from the local storage.",
      "args": [
        {
          "description": "key of the entry to remove",
          "param": "key",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Storage",
      "method": "storageRemove",
      "example": "storageRemove('key');",
      "utilArgs": "storageRemove(key)"
    },
    {
      "description": "Stores data to the local storage.",
      "args": [
        {
          "description": "name of the entry",
          "param": "key",
          "type": "String",
          "optional": false
        },
        {
          "description": "data to store in the local storage",
          "param": "data",
          "type": "*",
          "optional": false
        }
      ],
      "module": "Storage",
      "method": "storageSet",
      "example": "storageSet('key', data);",
      "utilArgs": "storageSet(key, data)"
    }
  ],
  "Array": [
    {
      "description": "Splits a string to an array based on the delimiter passed.",
      "args": [
        {
          "description": "string to convert to array",
          "param": "string",
          "type": "String",
          "optional": false
        },
        {
          "description": "where to split the string",
          "param": "delimiter",
          "type": "String",
          "optional": false
        }
      ],
      "module": "Array",
      "method": "stringToArray",
      "returns": {
        "desc": "Returns an array of the split string.",
        "type": "Array"
      },
      "example": "stringToArray('apple;banana;orange', ';');\n// => ['apple', 'banana', 'orange']",
      "utilArgs": "stringToArray(string, delimiter)"
    }
  ],
  "Boolean": [
    {
      "description": "Converts any value to a Boolean equivalent.",
      "args": [
        {
          "description": "value to check if true or false",
          "param": "val",
          "type": "*",
          "optional": false
        },
        {
          "description": "optional array of user defined true values",
          "param": "trueValuesArr",
          "type": "Array",
          "optional": true
        }
      ],
      "module": "Boolean",
      "method": "toBoolean",
      "returns": {
        "desc": "Returns a boolean equivalent of the value.",
        "type": "Boolean"
      },
      "example": "toBoolean('y');\n // => true\n\ntoBoolean(null);\n// => false",
      "utilArgs": "toBoolean(val, [trueValuesArr])"
    }
  ]
}