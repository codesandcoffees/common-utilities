{
  "ArrayUtil": [
    {
      "description": "Splits a string to an array based on the delimiter passed.",
      "args": [
        {
          "description": "string to convert to array",
          "param": "string",
          "type": "String",
          "optional": false
        },
        {
          "description": "where to split the string",
          "param": "delimiter",
          "type": "String",
          "optional": false
        }
      ],
      "module": "ArrayUtil",
      "util": "strToArray",
      "returns": {
        "desc": "Returns an array of the split string.",
        "type": "Array"
      },
      "example": "ArrayUtil.strToArray('apple;banana;orange', ';');\n// => ['apple', 'banana', 'orange']",
      "utilArgs": "strToArray(string, delimiter)"
    }
  ],
  "BoolUtil": [
    {
      "description": "Converts any value to a Boolean equivalent.",
      "args": [
        {
          "description": "value to check if true or false",
          "param": "val",
          "type": "*",
          "optional": false
        },
        {
          "description": "optional array of user defined true values",
          "param": "trueValuesArr",
          "type": "Array",
          "optional": true
        }
      ],
      "module": "BoolUtil",
      "util": "toBool",
      "returns": {
        "desc": "Returns a boolean equivalent of the value.",
        "type": "Boolean"
      },
      "example": "BoolUtil.toBool('y');\n // => true\n\nBoolUtil.toBool(null);\n// => false",
      "utilArgs": "toBool(val, [trueValuesArr])"
    }
  ],
  "ColorUtil": [
    {
      "description": "Get a random pastel color.",
      "args": [],
      "module": "ColorUtil",
      "util": "randomPastelColor",
      "returns": {
        "desc": "Returns an HSL color.",
        "type": "String"
      },
      "example": "ColorUtil.randomPastelColor();\n// => 'hsl(85.78009756824814,31.861668997564585%,90.94781190317771%)'",
      "utilArgs": "randomPastelColor()"
    }
  ],
  "CoreUtil": [
    {
      "description": "Checks if the type of the value is the expected type.",
      "args": [
        {
          "description": "any value to check",
          "param": "arg",
          "type": "*",
          "optional": false
        },
        {
          "description": "the type to check the value against",
          "param": "expectedType",
          "type": "String",
          "optional": false
        }
      ],
      "module": "CoreUtil",
      "util": "argTypesMatch",
      "returns": {
        "desc": "Returns a boolean if the type of the value matches to expectedType.",
        "type": "Boolean"
      },
      "example": "CoreUtil.argTypesMatch(1, 'number');\n// => true\n\nCoreUtil.argTypesMatch('abc', 'string');\n// => false",
      "utilArgs": "argTypesMatch(arg, expectedType)"
    }
  ],
  "FileUtil": [
    {
      "description": "Converts a number of bytes to a human readable file size.",
      "args": [
        {
          "description": "number of bytes to show",
          "param": "bytes",
          "type": "Number",
          "optional": false
        },
        {
          "description": "number of decimals to show",
          "param": "decimals",
          "type": "Number",
          "optional": false
        }
      ],
      "module": "FileUtil",
      "util": "convertBytes",
      "returns": {
        "desc": "Returns a human readable file size.",
        "type": "String"
      },
      "example": "FileUtil.convertBytes(1234);\n// => 1.205078125 kB\n\nFileUtil.convertBytes(1234, 2);\n// => 1.21 kB",
      "utilArgs": "convertBytes(bytes, decimals)"
    }
  ],
  "StringUtil": [
    {
      "description": "Convert an array to a string and combine on the delimiter passed.",
      "args": [
        {
          "description": "array to convert to string",
          "param": "array",
          "type": "Array",
          "optional": false
        },
        {
          "description": "characater to use in  combining to string",
          "param": "delimiter",
          "type": "String",
          "optional": false
        }
      ],
      "module": "StringUtil",
      "util": "arrToString",
      "returns": {
        "desc": "Returns a string from the array.",
        "type": "String"
      },
      "example": "StringUtil.arrToString(['The', 'quick', 'brown'], '-');\n// => 'The-brown-fox'",
      "utilArgs": "arrToString(array, delimiter)"
    },
    {
      "description": "Converts a string to Sentence case.",
      "args": [
        {
          "description": "string to convert to Sentence case",
          "param": "string",
          "type": "String",
          "optional": false
        }
      ],
      "module": "StringUtil",
      "util": "toSentenceCase",
      "returns": {
        "desc": "Returns a Sentence case string.",
        "type": "String"
      },
      "example": "StringUtil.toSentenceCase('THE QUICK BROWN FOX');\n// => 'The quick brown fox'",
      "utilArgs": "toSentenceCase(string)"
    },
    {
      "description": "Converts a string to a Title Case.",
      "args": [
        {
          "description": "string to convert to Title Case",
          "param": "string",
          "type": "String",
          "optional": false
        }
      ],
      "module": "StringUtil",
      "util": "toTitleCase",
      "returns": {
        "desc": "Returns a Tile Case string.",
        "type": "String"
      },
      "example": "StringUtil.toTitleCase('the quick brown fox');\n// => 'The Quick Brown Fox'",
      "utilArgs": "toTitleCase(string)"
    }
  ]
}